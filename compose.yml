services:
  # Database service
  postgres:
    image: postgres:latest
    container_name: postgres-prestabancodb
    environment:
      POSTGRES_DB: PrestaBancoDB
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - backend-network

  # Frontend services
  frontend1:
    image: sebsatian/frontend-prestabanco:latest
    container_name: frontend-prestabanco1
    networks:
      - frontend-network

  frontend2:
    image: sebsatian/frontend-prestabanco:latest
    container_name: frontend-prestabanco2
    networks:
      - frontend-network

  frontend3:
    image: sebsatian/frontend-prestabanco:latest
    container_name: frontend-prestabanco3
    networks:
      - frontend-network

  # Backend services
  backend1:
    image: sebsatian/backend-prestabanco:latest
    container_name: backend-prestabanco1
    environment:
      - DB_HOST=postgres-prestabancodb
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=admin
      - DB_NAME=PrestaBancoDB
    depends_on:
      - postgres
    networks:
      - backend-network

  backend2:
    image: sebsatian/backend-prestabanco:latest
    container_name: backend-prestabanco2
    environment:
      - DB_HOST=postgres-prestabancodb
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=admin
      - DB_NAME=PrestaBancoDB
    depends_on:
      - postgres  
    networks:
      - backend-network

  backend3:
    image: sebsatian/backend-prestabanco:latest
    container_name: backend-prestabanco3
    environment:
      - DB_HOST=postgres-prestabancodb
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=admin
      - DB_NAME=PrestaBancoDB
    depends_on:
      - postgres
    networks:
      - backend-network

  # Nginx for frontend load balancing
  nginx-frontend:
    image: nginx:latest
    container_name: nginx-frontend
    ports:
      - "8070:80"
    volumes:
      - ./nginx-frontend.conf:/etc/nginx/nginx.conf
    depends_on:
      - frontend1
      - frontend2
      - frontend3
    networks:
      - frontend-network

  # Nginx for backend load balancing
  nginx-backend:
    image: nginx:latest
    container_name: nginx-backend
    ports:
      - "8090:80"
    volumes:
      - ./nginx-backend.conf:/etc/nginx/nginx.conf
    depends_on:
      - backend1
      - backend2
      - backend3
    networks:
      - backend-network

  # Jenkins service
  jenkins:
    image: sebsatian/jenkins-custom:latest  # Reemplaza con la imagen subida a Docker Hub
    container_name: jenkins-custom
    ports:
      - "8080:8080"  # Port for Jenkins web interface
      - "50000:50000"  # Port for Jenkins agent communication
    volumes:
      - jenkins_home:/var/jenkins_home  # Persistent volume for Jenkins data
      - /var/run/docker.sock:/var/run/docker.sock  # Mount Docker socket to allow Jenkins to run Docker commands
    networks:
      - backend-network  # Connect to the backend network
      - frontend-network  # Connect to the frontend network
    environment:
      - JAVA_OPTS=-Djenkins.install.runSetupWizard=false  # Skip the initial setup wizard

networks:
  frontend-network:
  backend-network:

volumes:
  postgres-data:
  jenkins_home:
